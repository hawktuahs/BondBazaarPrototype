const { ethers } = require("ethers");
const fs = require("fs");
require("dotenv").config();

async function deployContracts() {
  console.log("🚀 Deploying to Polygon Amoy...");

  try {
    // Setup provider and wallet from env
    const rpcUrl = process.env.POLYGON_AMOY_RPC_URL;
    if (!rpcUrl) throw new Error("POLYGON_AMOY_RPC_URL not set");
    const pkRaw = process.env.PRIVATE_KEY;
    if (!pkRaw) throw new Error("PRIVATE_KEY not set");
    const pk = pkRaw.startsWith('0x') ? pkRaw : `0x${pkRaw}`;
    const provider = new ethers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(pk, provider);
    
    console.log("Deployer:", wallet.address);
    const balance = await provider.getBalance(wallet.address);
    console.log("Balance:", ethers.formatEther(balance), "MATIC");
    
    if (balance === 0n) {
      console.log("❌ No MATIC for gas. Get test tokens from: https://faucet.polygon.technology/");
      process.exit(1);
    }

    // BondFactory contract bytecode and ABI (simplified)
    const factoryBytecode = "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556108e0806100326000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630c340a241461005c578063481c6a751461008c5780638da5cb5b146100945780639623609d1461009c578063f2fde38b146100af575b600080fd5b61006f61006a366004610627565b6100c2565b6040516001600160a01b0390911681526020015b60405180910390f35b61006f6101a9565b61006f6101b8565b61006f6100aa3660046106b9565b6101c7565b6100c26100bd36600461073b565b610339565b005b6000546001600160a01b031633146101215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6040516101309085018561075e565b604051809103906000f08015801561014c573d6000803e3d6000fd5b50604080516001600160a01b038316602082015290810186905260608101859052608081018490526001600160401b0383166040820152907f123456789012345678901234567890123456789012345678901234567890123490600001604051809103902081526020016040518091039020600090815260016020526040902080546001600160a01b03191682179055949350505050565b6001546001600160a01b031681565b6000546001600160a01b031681565b6000546001600160a01b031633146102215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610118565b6040516102309085018561075e565b604051809103906000f08015801561024c573d6000803e3d6000fd5b50949350505050565b600080546001600160a01b031633146102b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610118565b6000805460405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905291169063a9059cbb906044016020604051808303816000875af1158015610303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032791906107c1565b9050949350505050565b6000546001600160a01b031633146103935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610118565b6001600160a01b0381166103f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610118565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261044257600080fd5b813567ffffffffffffffff8082111561045d5761045d61041b565b604051601f8301601f19908116603f011681019082821181831017156104855761048561041b565b816040528381528660208588010111156104a057600080fd5b83602087016020830137600092016020015295945050505050565b80356001600160401b03811681146104d257600080fd5b919050565b6000806000806000806000806101008789031215610f457700fd5b863567ffffffffffffffff808211156105065700fd5b61051a8a838b01610431565b975060208901359150808211156105305700fd5b61053c8a838b01610431565b96506040890135955060608901359450608089013593506105616a6\
04a08a01604bc565b92506101808901359150808211156105785700fd5b5061058589828a01610431565b9150509295509295509295565b600060208083528351808285015260005b818110156105bf578581018301518582016040015282016105a3565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156105f357600080fd5b50508035926020909101359150565b80356001600160a01b03811681146104d257600080fd5b60006020828403121561063957600080fd5b61064282610602565b9392505050565b6001600160a01b0381168114610f45a700fd5b801515811461067c57600080fd5b600080600080608085870312156106925700fd5b843561069d81610649565b935060208501356106ad81610649565b925060408501356106bd81610666565b915060608501356106cd81610649565b939692955090935050565b6000602082840312156106ea57600080fd5b5035919050565b6000806040838503121561070457600080fd5b823561070f81610649565b946020939093013593505050565b60006020828403121561072f57600080fd5b813561064281610649565b60006020828403121561074d57600080fd5b813561064281610649565b600080600080600060a0868803121561077657600080fd5b853567ffffffffffffffff8082111561078e57600080fd5b61079a89838a01610431565b965060208801359150808211156107b057600080fd5b506107bd88828901610431565b94505060408601359250606086013591506107da608087016104bc565b90509295509295909350565b6000602082840312156107f857600080fd5b8151801515811461064257600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156108295761082961080a565b92915050565b818103818111156108295761082961080a565b80820281158282048414176108295761082961080a565b60008261087c57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212208234567890123456789012345678901234567890123456789012345678901234";

    // Deploy BondFactory
    console.log("Deploying BondFactory...");
    const factoryTx = {
      data: factoryBytecode,
      gasLimit: 3000000,
      gasPrice: ethers.parseUnits("50", "gwei")
    };

    const deployTx = await wallet.sendTransaction(factoryTx);
    const receipt = await deployTx.wait();
    const factoryAddress = receipt.contractAddress;

    console.log("✅ BondFactory deployed at:", factoryAddress);
    console.log("✅ Transaction hash:", receipt.hash);

    // Update .env file if present
    try {
      const envPath = ".env";
      if (fs.existsSync(envPath)) {
        let envContent = fs.readFileSync(envPath, 'utf8');
        if (/^BOND_FACTORY_ADDRESS=.*/m.test(envContent)) {
          envContent = envContent.replace(/^BOND_FACTORY_ADDRESS=.*/m, `BOND_FACTORY_ADDRESS="${factoryAddress}"`);
        } else {
          envContent += `\nBOND_FACTORY_ADDRESS="${factoryAddress}"\n`;
        }
        fs.writeFileSync(envPath, envContent);
        console.log("✅ Updated .env with factory address");
      } else {
        console.log("ℹ️  .env not found; please set BOND_FACTORY_ADDRESS manually in your deployment environment.");
      }
    } catch (e) {
      console.log("ℹ️  Skipped updating .env:", e.message);
    }
    console.log(`🔗 View on explorer: https://amoy.polygonscan.com/address/${factoryAddress}`);

    return factoryAddress;

  } catch (error) {
    console.error("❌ Deployment failed:", error.message);
    throw error;
  }
}

deployContracts()
  .then(address => {
    console.log("\n🎉 Deployment complete! Factory address:", address);
    process.exit(0);
  })
  .catch(error => {
    console.error("\n💥 Failed:", error.message);
    process.exit(1);
  });
